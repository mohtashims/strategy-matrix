name: NEW Loop Over Comma-Separated Values

on:
  push:
    branches:
      - main

jobs:
  createloopmatrix:
    runs-on: windows-latest
    outputs: 
      MATRIX: ${{ steps.set-matrix.outputs.MATRIX }}
      ENV-VARS: ${{ steps.set-matrix.outputs.ENV-VARS }}

    steps:
      - name: Run PowerShell 
        id: set-matrix
        shell: pwsh
        run: |

          $EnvNamesJSONVariable = @{}
          $envList = New-Object System.Collections.ArrayList
          $displayList = New-Object System.Collections.ArrayList
          
          $color = "hello, yellow"
          $values = $color.Split(',')

          $matrix = @()
          $envVars = @{}

          foreach ($value in $values) {
            $matrixName = "MA_$value"
            $matrix += @{ "DISPLAYLIST" = $matrixName; "CUSTOMENVNAME" = $value }
            $envVars."$value" = $value
            Write-Output "Value: $value"
          }

          echo "MATRIX=$($matrix | ConvertTo-Json -Compress -Depth 100)" >> "$env:GITHUB_OUTPUT"
          echo "ENV-VARS=$($envVars | ConvertTo-Json -Compress -Depth 100)" >> "$env:GITHUB_OUTPUT"
          

  Trigger_Service:
    name: ${{ matrix.DISPLAYLIST }}
    needs: [createloopmatrix]
    runs-on: windows-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.createloopmatrix.outputs.MATRIX) }}
    environment:
      name: ${{ matrix.CUSTOMENVNAME }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      JOB_NAME: MA_yellow    
    # env:
    #   HELLO: ${{ needs.createloopmatrix.outputs.ENV-VARS.Hello }}
    #   YELLOW: ${{ needs.createloopmatrix.outputs.ENV-VARS.Yellow }}
    steps:
      - name: Split Matrix name for use
        run: |
          Write-Host "Inside Matrix"
          Write-Host "Hello: ${{ env.Hello }}"
          Write-Host "Yellow: ${{ env.Yellow }}"

          $repoOwner = "${{ github.repository_owner }}"
          $repoName = "${{ github.event.repository.name }}"
          $workflowId = "${{ github.workflow }}"
          $jobName = "${{ env.JOB_NAME }}"

          $headers = @{
            "Authorization" = "token $env:GITHUB_TOKEN"
            "Accept" = "application/vnd.github.v3+json"
          }

          Write-Host "workflowRuns is https://api.github.com/repos/$repoOwner/$repoName/actions/workflows/$workflowId/runs?status=queued -Headers $headers"
          $workflowRuns = Invoke-RestMethod -Uri "https://api.github.com/repos/$repoOwner/$repoName/actions/workflows/$workflowId/runs?status=queued" -Headers $headers
          $latestRun = $workflowRuns.workflow_runs | Select-Object -First 1

          $jobIds = $latestRun.jobs | Where-Object { $_.name -eq $jobName } | Select-Object -ExpandProperty id
          if ($jobIds) {
            foreach ($jobId in $jobIds) {
              $approvalUrl = "https://api.github.com/repos/$repoOwner/$repoName/actions/runs/$($latestRun.id)/jobs/$jobId/rerun"
              Invoke-RestMethod -Method Post -Uri $approvalUrl -Headers $headers
              Write-Host "Triggered job '$jobName' in run $($latestRun.id)"
            }
          } else {
            Write-Host "Job '$jobName' not found in the latest queued run."
          }

          
